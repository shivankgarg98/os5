#!/usr/bin/env bash

# Requires: gcc mpc, mpfr, gmp
# On raspberry libmpc-dev, libmpfr-dev, libgmp-dev

. ./util/common.sh

function install_binutils() {
  local package=binutils-2.24
  local url=ftp://ftp.gnu.org/gnu/binutils/${package}.tar.gz
  local patches=$(pwd)/toolchain/binutils.patch

  get_package "${package}" "${url}" "${patches}"
  build_package "${package}" "${TOOLCHAIN}/bin/${TARGET}-ld" "--target=${TARGET} --disable-werror"
}

function install_gcc() {
  local package=gcc-4.8.2
  local url=ftp://ftp.gnu.org/gnu/gcc/${package}/${package}.tar.gz
  local patches=$(pwd)/toolchain/gcc.patch

  local gcclocation=${TOOLCHAIN}/bin/${TARGET}-gcc
  local liblocation=${TOOLCHAIN}/lib/gcc/${TARGET}/4.8.2/libgcc.a

  get_package "${package}" "${url}" "${patches}"
  build_package "${package}" "${gcclocation}" "--target=${TARGET} --disable-nls --enable-languages=c,c++" "-gcc"
  build_package "${package}" "${liblocation}" "--target=${TARGET} --disable-nls --enable-languages=c,c++" "-target-libgcc"
}

function install_gdb() {
  local package=gdb-7.7.1
  local url=ftp://ftp.gnu.org/gnu/gdb/${package}.tar.gz
  local patches=

  local gdblocation=${TOOLCHAIN}/bin/i586-elf-gdb

  get_package "${package}" "${url}" "${patches}"
  build_package "${package}" "${gdblocation}" "--target=i586-elf --disable-debug --disable-dependency-tracking --with-python=/usr"
}

function install_grub() {
  local objconv_package=objconv
  local objconv_url=http://www.agner.org/optimize/objconv.zip
  local package=grub
  local url=ftp://ftp.gnu.org/gnu/grub/${package}.tar.gz
  local patches=$(pwd)/toolchain/grub.patch

  get_package "${objconv_package}" "${objconv_url}" ""
  # get_package "${package}" "${url}" "${patches}"

  # Compile objconv
  # mkdir -p "${STASH}/build-objconv"
  # pushd "${STASH}/build-objconv"
  #   rm -rf .
  #   print_task "  Building" " ${package}"
  #   unzip ../objconv.zip
  #   unzip source.zip
  #   g++ -o objconv -O2 ./*.cpp
  #   print_task "  Installing" " ${package}"
  #   mv objconv "${TOOLCHAIN}/bin/objconv"
  # popd

  # Compile grub
  pushd "${STASH}"
    print_task "  Downloading" " grub"
    git clone git://git.savannah.gnu.org/grub.git --depth=1
    patch grub "${patches}"
    pushd grub
      ./autogen.sh
    popd
  popd
  mkdir -p "${STASH}/build-grub"
  pushd "${STASH}/build-grub"
    ../grub/configure --prefix="${TOOLCHAIN}" --target=i386 CC=gcc-4.9 LDFLAGS=-L/usr/local/opt/flex/lib CPPFLAGS=-I/usr/local/opt/flex/include PATH="${TOOLCHAIN}/bin/:${PATH}"
    PATH="${TOOLCHAIN}/bin/:${PATH}" make
    make install
  popd
  
}

function main() {

  mkdir -p "${TOOLCHAIN}"
  mkdir -p "${STASH}"

  while getopts "f" OPTION
  do
    case ${OPTION} in
      f)
        readonly FORCE=1
        ;;
    esac
  done


  install_binutils
  install_grub
  PATH=${TOOLCHAIN}/bin/:${PATH}
  install_gcc
  install_gdb
}

main "${@}"
